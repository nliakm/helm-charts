---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  {{- with .Values.app.global.annotations }}
  annotations:
  {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote}}
  {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.app.global.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-app
    {{- with .Values.app.global.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote}}
      {{- end }}
    {{- end }}
    spec:
      {{- with .Values.app.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        # wger app container
        - name: wger
          image: "{{ .Values.app.global.image.registry }}/{{ .Values.app.global.image.repository }}:{{ .Values.app.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.global.image.PullPolicy }}
          env:
            {{- include "wger.env" . | indent 12 }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.django.secret.name | default "django" | quote }}
                  key: "secret-key"
            - name: SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.jwt.secret.name | default "jwt" | quote }}
                  key: "signing-key"
            ## existing DB
            {{- if .Values.existingPostgres }}
            - name: DJANGO_DB_USER
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_USER"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.user }}
              {{- end }}
            - name: DJANGO_DB_PASSWORD
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_PASSWORD"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.password }}             
              {{- end }}
            - name: DJANGO_DB_DATABASE
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_DB"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.database }}
              {{- end }}
            - name: DJANGO_DB_HOST
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_HOST"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.host }}
              {{- end }}              
            ## end existing DB
            {{- else }}
            - name: DJANGO_DB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_USER"
            - name: DJANGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_PASSWORD"
            - name: DJANGO_DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "POSTGRES_DB"
            {{- end }}
            # to enable redis authentication
            # additional settings in the values
            # must be made, passed to the redis
            # container
            {{- if .Values.redis.auth.enabled }}
            - name: DJANGO_CACHE_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "redis"
                  key: "redis-password"
            - name: CELERY_BROKER
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- else }}
            - name: CELERY_BROKER
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- end }}
            {{- if .Values.celery.flower.enabled }}
            - name: CELERY_FLOWER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.celery.flower.secret.name | default "flower" | quote }}
                  key: "password"
            {{- end }}
          ports:
            - containerPort: 8000
          resources:
            requests:
              memory: {{ .Values.app.resources.requests.memory }}
              cpu: {{ .Values.app.resources.requests.cpu }}
            limits:
              memory: {{ .Values.app.resources.limits.memory }}
              cpu: {{ .Values.app.resources.limits.cpu }}
          {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
          volumeMounts:
            - name: wger-media
              mountPath: /home/wger/media
              readOnly: false
            - name: wger-static
              mountPath: /home/wger/static
              readOnly: false
            {{- if .Values.app.persistence.existingClaim.code }}
            - name: wger-code
              mountPath: /home/wger/src
              readOnly: false
            {{- end }}
            {{- if .Values.celery.enabled }}
            - name: wger-celery-beat
              mountPath: /home/wger/beat
              readOnly: false
            {{- end }}
          {{- end }}
        # nginx container
        {{- if .Values.app.nginx.enabled }}
        - name: nginx
          image: {{ .Values.app.nginx.image }}
          imagePullPolicy: {{ .Values.app.nginx.imagePullPolicy }}
          env:
            - name: TZ
              value: {{ .Values.app.timezone | default "UTC" | quote }}
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/
            - name: wger-media
              mountPath: /var/www/html/media
              readOnly: true
            - name: wger-static
              mountPath: /var/www/html/static
              readOnly: true
          resources:
            requests:
              cpu: 10m
        {{- end }}
      initContainers:
        - name: init-container
          image: docker.io/busybox:latest
          command:
            - /bin/sh
            - -c
            - until nc -zvw10 {{.Release.Name}}-redis {{ .Values.redis.service.serverPort }}; do echo "Waiting for redis service ({{.Release.Name}}-redis:{{ .Values.redis.service.serverPort }})"; sleep 2; done &&
              {{- if not .Values.existingPostgres }}
              until nc -zvw10 {{.Release.Name}}-postgres {{ .Values.postgres.service.port }}; do echo "Waiting for postgres service ({{.Release.Name}}-postgres:{{ .Values.postgres.service.port }}) "; sleep 2; done
              {{- end }}
      {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
      volumes:
        - name: wger-media
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.media | default "wger-media" | quote }}
        - name: wger-static
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.static | default "wger-static" | quote }}
          {{- if .Values.app.persistence.existingClaim.code }}
        - name: wger-code
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.code | quote }}
          {{- end }}
          {{- if .Values.celery.enabled }}
        - name: wger-celery-beat
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.celeryBeat | default "wger-celery-beat" | quote }}
          {{- end }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-configmap
        {{- end }}
      {{- end }}
---
{{- if .Values.celery.enabled }}
# celery only works with persistence enabled
{{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-celery
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  {{- with .Values.celery.annotations }}
  annotations:
  {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote}}
  {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.celery.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-celery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-celery
    {{- with .Values.celery.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote}}
      {{- end }}
    {{- end }}
    spec:
      {{- with .Values.celery.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        # celery beat
        - name: celery-beat
          image: "{{ .Values.app.global.image.registry }}/{{ .Values.app.global.image.repository }}:{{ .Values.app.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.global.image.PullPolicy }}
          env:
            {{- include "wger.env" . | indent 12 }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.django.secret.name | default "django" | quote }}
                  key: "secret-key"
            - name: SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.jwt.secret.name | default "jwt" | quote }}
                  key: "signing-key"
            ## existing DB
            {{- if .Values.existingPostgres }}
            - name: DJANGO_DB_USER
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_USER"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.user }}
              {{- end }}
            - name: DJANGO_DB_PASSWORD
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_PASSWORD"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.password }}             
              {{- end }}
            - name: DJANGO_DB_DATABASE
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_DB"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.database }}
              {{- end }}
            - name: DJANGO_DB_HOST
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_HOST"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.host }}
              {{- end }}              
            ## end existing DB
            {{- else }}
            - name: DJANGO_DB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_USER"
            - name: DJANGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_PASSWORD"
            - name: DJANGO_DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "POSTGRES_DB"
            {{- end }}
            # to enable redis authentication
            # additional settings in the values
            # must be made, passed to the redis
            # container
            {{- if .Values.redis.auth.enabled }}
            - name: DJANGO_CACHE_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "redis"
                  key: "redis-password"
            - name: CELERY_BROKER
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- else }}
            - name: CELERY_BROKER
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- end }}
            {{- if .Values.celery.flower.enabled }}
            - name: CELERY_FLOWER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.celery.flower.secret.name | default "flower" | quote }}
                  key: "password"
            {{- end }}
          command: ["/start-beat"]
          volumeMounts:
            - name: wger-celery-beat
              mountPath: /home/wger/beat
              readOnly: false
            {{- if .Values.app.persistence.existingClaim.code }}
            - name: wger-code
              mountPath: /home/wger/src
              readOnly: false
            {{- end }}
        # celery flower
        {{- if .Values.celery.flower.enabled }}
        - name: celery-flower
          image: "{{ .Values.app.global.image.registry }}/{{ .Values.app.global.image.repository }}:{{ .Values.app.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.global.image.PullPolicy }}
          env:
            {{- include "wger.env" . | indent 12 }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.django.secret.name | default "django" | quote }}
                  key: "secret-key"
            - name: SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.jwt.secret.name | default "jwt" | quote }}
                  key: "signing-key"
            ## existing DB
            {{- if .Values.existingPostgres }}
            - name: DJANGO_DB_USER
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_USER"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.user }}
              {{- end }}
            - name: DJANGO_DB_PASSWORD
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_PASSWORD"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.password }}             
              {{- end }}
            - name: DJANGO_DB_DATABASE
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_DB"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.database }}
              {{- end }}
            - name: DJANGO_DB_HOST
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_HOST"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.host }}
              {{- end }}              
            ## end existing DB
            {{- else }}
            - name: DJANGO_DB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_USER"
            - name: DJANGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_PASSWORD"
            - name: DJANGO_DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "POSTGRES_DB"
            {{- end }}
            # to enable redis authentication
            # additional settings in the values
            # must be made, passed to the redis
            # container
            {{- if .Values.redis.auth.enabled }}
            - name: DJANGO_CACHE_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "redis"
                  key: "redis-password"
            - name: CELERY_BROKER
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- else }}
            - name: CELERY_BROKER
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- end }}
            - name: CELERY_FLOWER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.celery.flower.secret.name | default "flower" | quote }}
                  key: "password"
          command: ["/start-flower"]
          ports:
            - containerPort: 5555
          volumeMounts:
            {{- if .Values.app.persistence.existingClaim.code }}
            - name: wger-code
              mountPath: /home/wger/src
              readOnly: false
            {{- end }}
      initContainers:
      - name: init-container
        image: docker.io/busybox:latest
        command:
          - /bin/sh
          - -c
          - until nc -zvw10 {{.Release.Name}}-redis {{ .Values.redis.service.serverPort }}; do echo "Waiting for redis service ({{.Release.Name}}-redis:{{ .Values.redis.service.serverPort }})"; sleep 2; done &&
            {{- if not .Values.existingPostgres }}
            until nc -zvw10 {{.Release.Name}}-postgres {{ .Values.postgres.service.port }}; do echo "Waiting for postgres service ({{.Release.Name}}-postgres:{{ .Values.postgres.service.port }}) "; sleep 2; done &&
            {{- end }}
            until wget --spider http://{{.Release.Name}}-http:8000; do echo "Waiting for wger app service ({{.Release.Name}}-http:8000)"; sleep 2; done
        {{- end }}
      volumes:
        - name: wger-media
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.media | default "wger-media" | quote }}
        - name: wger-static
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.static | default "wger-static" | quote }}
          {{- if .Values.app.persistence.existingClaim.code }}
        - name: wger-code
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.code | quote }}
          {{- end }}
        - name: wger-celery-beat
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.celeryBeat | default "wger-celery-beat" | quote }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-configmap
        {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-celery-worker
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  {{- with .Values.celery.annotations }}
  annotations:
  {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote}}
  {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.celery.replicasWorker }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-celery-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-celery-worker
    {{- with .Values.celery.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote}}
      {{- end }}
    {{- end }}
    spec:
      {{- with .Values.celery.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        # celery worker
        - name: celery-worker
          image: "{{ .Values.app.global.image.registry }}/{{ .Values.app.global.image.repository }}:{{ .Values.app.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.global.image.PullPolicy }}
          env:
            {{- include "wger.env" . | indent 12 }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.django.secret.name | default "django" | quote }}
                  key: "secret-key"
            - name: SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.jwt.secret.name | default "jwt" | quote }}
                  key: "signing-key"
            ## existing DB
            {{- if .Values.existingPostgres }}
            - name: DJANGO_DB_USER
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_USER"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.user }}
              {{- end }}
            - name: DJANGO_DB_PASSWORD
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_PASSWORD"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.password }}             
              {{- end }}
            - name: DJANGO_DB_DATABASE
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_DB"
              {{- else }}
              value: {{ .Values.existingPostgres.settings.database }}
              {{- end }}
            - name: DJANGO_DB_HOST
              {{- if .Values.existingPostgres.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingPostgres.existingSecret }}
                  key: "USERDB_HOST"
              {{- else }}            
              value: {{ .Values.existingPostgres.settings.host }}
              {{- end }}              
            ## end existing DB
            {{- else }}
            - name: DJANGO_DB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_USER"
            - name: DJANGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "USERDB_PASSWORD"
            - name: DJANGO_DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-postgres"
                  key: "POSTGRES_DB"
            {{- end }}
            # to enable redis authentication
            # additional settings in the values
            # must be made, passed to the redis
            # container
            {{- if .Values.redis.auth.enabled }}
            - name: DJANGO_CACHE_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "redis"
                  key: "redis-password"
            - name: CELERY_BROKER
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://:$(DJANGO_CACHE_CLIENT_PASSWORD)@{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- else }}
            - name: CELERY_BROKER
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            - name: CELERY_BACKEND
              value: "redis://{{ .Release.Name }}-redis:{{ int .Values.redis.service.serverPort }}/2"
            {{- end }}
            {{- if .Values.celery.flower.enabled }}
            - name: CELERY_FLOWER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.celery.flower.secret.name | default "flower" | quote }}
                  key: "password"
            {{- end }}
          command: ["/start-worker"]
          volumeMounts:
            - name: wger-media
              mountPath: /home/wger/media
              readOnly: false
            {{- if .Values.app.persistence.existingClaim.code }}
            - name: wger-code
              mountPath: /home/wger/src
              readOnly: false
            {{- end }}
      initContainers:
      - name: init-container
        image: docker.io/busybox:latest
        command:
          - /bin/sh
          - -c
          - until nc -zvw10 {{.Release.Name}}-redis {{ .Values.redis.service.serverPort }}; do echo "Waiting for redis service ({{.Release.Name}}-redis:{{ .Values.redis.service.serverPort }})"; sleep 2; done &&
            {{- if not .Values.existingPostgres }}
            until nc -zvw10 {{.Release.Name}}-postgres {{ .Values.postgres.service.port }}; do echo "Waiting for postgres service ({{.Release.Name}}-postgres:{{ .Values.postgres.service.port }}) "; sleep 2; done &&
            {{- end }}
            until wget --spider http://{{.Release.Name}}-http:8000; do echo "Waiting for wger app service ({{.Release.Name}}-http:8000)"; sleep 2; done
      volumes:
        - name: wger-media
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.media | default "wger-media" | quote }}
        - name: wger-static
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.static | default "wger-static" | quote }}
          {{- if .Values.app.persistence.existingClaim.code }}
        - name: wger-code
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.code | quote }}
          {{- end }}
        - name: wger-celery-beat
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.celeryBeat | default "wger-celery-beat" | quote }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-configmap
        {{- end }}
---
{{- end }}
{{- end }}
